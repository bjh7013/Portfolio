<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
	<mapper namespace="com.ssazit.dao.BookDAO">

	<!-- 
	private int 	bookNo;			/*PK AI 책번호*/
	private int		writer;				/*FK NN 작성자 번호*/
	private String 	bookTitle;			/*NN 책 제목*/
	private String	bookIndex;			/*NN 책 목차*/
	private String	bookContent;		/*NN 책 내용*/
	private String	bookReference;		/*NN 출처*/
	private int		version;			/*NN default 1 버전*/
	private String  writeDate;			/*NN default now() 작성 일시*/
	private String  updateDate;			/*수정 일시*/
	private String	openScope;			/*NN 공개범위(공개(public)/친구공개(protected)/비공개(private)*/
	private String 	coverFront;			/*NN 표지(앞)*/
	private String 	coverMiddle;		/*NN 표지(중)*/
	private String 	coverBack;			/*NN 표지(뒤)*/
	private String 	likeCount;			/*NN default 0 추천수(트리거 참조칼럼)*/
	private int 	categoryNo;			/*카테고리 번호*/
	
	private String 	searchKey;			/*검색 키*/
	private String 	searchValue;		/*검색 값*/
	private String 	orderKey;			/*정렬 키*/
	private String 	orderValue;			/*정렬 값*/
	private int 	limitStart;			/*페이징 시작*/
	private int 	limitEnd;			/*페이징 끝*/
	private int		loginUserNo;		/*로그인해서 글을 조회하는 유저 번호*/
	
	//join data
	private String 	nickName;			/*작성자 닉네임*/
	private String 	userId;				/*작성자 아이디*/
	private String	userLevel;			/*작성자 레벨*/
	private String	profileImg;			/*작성자 프로필이미지*/
	
	private int 	seriesNo;			/*시리즈 번호*/
	private String 	seriesName;			/*시리즈 명*/
	private String 	seriesDesc;			/*시리즈 설명*/
	private String 	categoryName;		/*카테고리 명*/
	-->
	 
	 <!-- 입력 -->
	 <insert id="insertBook" parameterType="Book">
	 	insert into book(
	 		writer,
	 		book_title,
	 		book_index,
	 		book_content,
	 		book_reference,
	 		<if test="version > 0">
		 		version,	 		
	 		</if>
	 		write_date,
	 		open_scope,
	 		category_no
	 		<if test="coverFront != null and coverFront != ''">
	 			,cover_front	 		
	 		</if>
	 		<if test="coverMiddle != null and coverMiddle != ''">
		 		,cover_middle	 		
	 		</if>
	 		<if test="coverBack != null and coverBack != ''">	 		
		 		,cover_back
	 		</if>
	 		)
	 	values (
	 		#{writer},
	 		#{bookTitle},
	 		#{bookIndex},
	 		#{bookContent},
	 		#{bookReference},
	 		<if test="version > 0">
		 		#{version},
	 		</if>
	 		now(),
	 		#{openScope},
	 		#{categoryNo}
	 		<if test="coverFront != null and coverFront != ''">
	 			,#{coverFront}	 		
	 		</if>
	 		<if test="coverMiddle != null and coverMiddle != ''">
		 		,#{coverMiddle}	 		
	 		</if>
	 		<if test="coverBack != null and coverBack != ''">	 		
		 		,#{coverBack}
	 		</if>
	 		)
	 </insert>
	 
	 <!-- 수정 -->
	 <update id="updateBook" parameterType="Book">
	 	update
	 		book
	 	set
	 		book_title = #{bookTitle},
	 		book_index = #{bookIndex},
	 		book_content = #{bookContent},
	 		book_reference = #{bookReference},
	 		version = #{version},	
		 	update_date = now(),
		 	open_scope = #{openScope},
		 	category_no = #{categoryNo},
	 		cover_front = #{coverFront},
	 		cover_middle = #{coverMiddle},
	 		cover_back = #{coverBack}
	 	where
	 		1=1
	 	and
	 		book_no = #{bookNo}
	 </update>
	 
	 <!-- 삭제 -->
	 <delete id="deleteBook" parameterType="Book">
	 	delete from
	 		book
	 	where
	 		1=1
	 	and
	 		book_no = #{bookNo}
	 </delete>
	 
	 <!-- 상세보기 -->
	 <select id="selectBookOne" parameterType="Book"  resultType="Book">
	 	select
	 		book.book_no as bookNo,
	 		writer as writer,
	 		book_title as bookTitle,
	 		book_index as bookIndex,
	 		book_content as bookContent,
	 		book_reference as bookReference,
	 		version as version,
	 		write_date as writeDate,
	 		update_date as updateDate,
	 		open_scope as openScope,
	 		cover_front as coverFront,
	 		cover_middle as coverMiddle,
	 		cover_back as coverBack,
	 		like_count as likeCount,
	 		category.category_no as categoryNo,
	 		nick_name as nickName,
	 		user_id as userId,
	 		user_level as userLevel,
	 		profile_img as profileImg,
	 		category.category_name as categoryName
	 		<if test="loginUserNo > 0">
	 			, like_date as likeDate
	 			, favorite_date as favoriteDate
	 		</if>
	 	from
	 		(book inner join user on book.writer = user.user_no)
	 		left outer join category 
	 			on book.category_no = category.category_no
	 		<if test="loginUserNo > 0">
	 			left outer join booklike 
	 				on book.book_no = booklike.book_no and booklike.user_no = #{loginUserNo}
	 			left outer join bookfavorite
	 				on book.book_no = bookfavorite.book_no and bookfavorite.user_no = #{loginUserNo}
	 		</if>
	 	where
	 		1=1
	 	and
	 		book.book_no = #{bookNo}
	 </select>
	 
	 <!-- 검색(List) -->
	 <select id="selectBookList" parameterType="Book" resultType="Book">
	 	select 
			res.book_no as bookNo,
			res.writer as writer,
			res.book_title as bookTitle,
		    res.book_index as bookIndex,
			res.book_content as bookContent,
		    res.book_reference as bookReference,
		    res.cover_front as coverFront,
		    res.cover_middle as coverMiddle,
		    res.cover_back as coverBack,
		    res.like_count as likeCount,
			res.write_date as writeDate,
		    res.update_date as updateDate,
		    res.version as version,
		    res.open_scope as openScope,
			res.category_no as categoryNo,
			category_name as categoryName
		from
			(
			select *
			from
				(
					(
					select 
						book_no
					from 
						(
						select * 
							from book
						where 1=1
						<!-- 블로그 내 검색일 경우 -->
						<if test="writer>0">
							and writer = #{writer}					
						</if>
						)
						bk
					left outer join
						category
					on bk.category_no = category.category_no
					where 
						1=1
					<if test="searchValue != null and searchValue != ''">
						and bk.book_title LIKE CONCAT('%',#{searchValue},'%')
						or category_name LIKE CONCAT('%',#{searchValue},'%')					
					</if>	
					)
				UNION
					(
					select book_no
					from 
						(select * from tag where 1=1 
						<if test="searchValue != null and searchValue != ''">
						and tag_name LIKE CONCAT('%',#{searchValue},'%')
							<if test="groupNo>0">
								 OR group_no = #{tagGroupNo} 
							</if>
						</if>
						)
							tags
						INNER JOIN
							booktag
						ON booktag.tag_no = tags.tag_no
						group by book_no
					)
				UNION
					(
					select book_no
					from tmptag
					where
					1=1
					<if test="searchValue != null and searchValue != ''">
						and tmptag_name LIKE CONCAT('%',#{searchValue},'%')
					</if>
					)
				) bookno NATURAL JOIN book
			) res left outer join category 
			on res.category_no = category.category_no
			inner join user
			on res.writer = user.user_no
		where 1=1
			<if test="writer>0">
				and writer = #{writer}
			</if>
			<choose>
				<when test="openScope != null and openScope != ''">
					<choose>
						<when test="openScope == 'block'">
							and open_scope = "block"
						</when>
						<when test="openScope == 'public'">
							and open_scope = "public"
						</when>
						<when test="openScope == 'protected'">
							and (open_scope = "public" or open_scope = "protected")
						</when>
						<when test="openScope == 'private'">
							and (open_scope = "public" or open_scope = "protected" or open_scope = "private")
						</when>
						<otherwise>
							and open_scope = "public"
						</otherwise>
					</choose>
				</when>
				<otherwise>
					and open_scope = "public"
				</otherwise>									
			</choose>
	 	
	 	<if test="bookTitle != null and bookTitle != ''">
	 		and book_title like CONCAT('%',#{bookTitle},'%')
	 	</if>
	 	<if test="categoryNo > 0">
	 		and res.category_no = #{categoryNo}
	 	</if>
	 	
	 	<!-- 
	 	<if test="coverFront != null and coverFront != ''">
	 		and cover_front like CONCAT('%',#{coverFront},'%')
	 	</if>
	 	<if test="coverMiddle != null and coverMiddle != ''">
	 		and cover_middle like CONCAT('%',#{coverMiddle},'%')
	 	</if>
	 	<if test="coverBack != null and coverBack != ''">
	 		and cover_back like CONCAT('%',#{coverBack},'%')
	 	</if>
	 	 -->
	 	<!-- 정렬조건 -->
	 	<choose>
	 		<when test="orderValue == 'DESC'">
	 			<choose>
	 				<when test="orderKey == 'bookNo'">
	 					order by book_no DESC
	 				</when>
	 				<when test="orderKey == 'writer'">
	 					order by writer DESC
	 				</when>
	 				<when test="orderKey == 'bookTitle'">
	 					order by book_title DESC
	 				</when>
	 				<when test="orderKey == 'version'">
	 					order by version DESC
	 				</when>
	 				<when test="orderKey == 'updateDate'">
	 					order by update_date DESC
	 				</when>
	 				<when test="orderKey == 'openScope'">
	 					order by open_scope DESC
	 				</when>
	 				<when test="orderKey == 'coverFront'">
	 					order by cover_front DESC
	 				</when>
	 				<when test="orderKey == 'coverMiddle'">
	 					order by cover_middle DESC
	 				</when>
	 				<when test="orderKey == 'coverBack'">
	 					order by cover_back DESC
	 				</when>
	 				<when test="orderKey == 'likeCount'">
	 					order by like_count DESC
	 				</when>
	 				<otherwise>
	 					order by write_date DESC
	 				</otherwise>
	 			</choose>
	 		</when>
	 		<otherwise>
	 			<choose>
	 				<when test="orderKey == 'bookNo'">
	 					order by book_no ASC
	 				</when>
	 				<when test="orderKey == 'writer'">
	 					order by writer ASC
	 				</when>
	 				<when test="orderKey == 'bookTitle'">
	 					order by book_title ASC
	 				</when>
	 				<when test="orderKey == 'version'">
	 					order by version ASC
	 				</when>
	 				<when test="orderKey == 'updateDate'">
	 					order by update_date ASC
	 				</when>
	 				<when test="orderKey == 'openScope'">
	 					order by open_scope ASC
	 				</when>
	 				<when test="orderKey == 'coverFront'">
	 					order by cover_front ASC
	 				</when>
	 				<when test="orderKey == 'coverMiddle'">
	 					order by cover_middle ASC
	 				</when>
	 				<when test="orderKey == 'coverBack'">
	 					order by cover_back ASC
	 				</when>
	 				<when test="orderKey == 'likeCount'">
	 					order by like_count ASC
	 				</when>
	 				<otherwise>
	 					order by write_date ASC
	 				</otherwise>
	 			</choose>
	 		</otherwise>
	 	</choose>
		<!-- page 처리 -->
	 	<if test="limitEnd > 0 and limitStart >= 0">
			limit #{limitStart}, #{limitEnd}
		</if>
	 </select>
	 
	 <!-- 검색(갯수) -->
	 <select id="selectBookCount" parameterType="Book" resultType="Integer">
	 	select 
			count(book_no)
		from
			(
			select *
			from
				(
					(
					select 
						book_no
					from 
						(
						select * 
							from book
						where 1=1
						<!-- 블로그 내 검색일 경우 -->
						<if test="writer>0">
							and writer = #{writer}
						</if>
						)
						bk
					left outer join
						category
					on bk.category_no = category.category_no
					where 
						1=1
					<if test="searchValue != null and searchValue != ''">
						and bk.book_title LIKE CONCAT('%',#{searchValue},'%')
						or category_name LIKE CONCAT('%',#{searchValue},'%')					
					</if>	
					)
				UNION
					(
					select book_no
					from 
						(select * from tag where 1=1 
						<if test="searchValue != null and searchValue != ''">
						and tag_name LIKE CONCAT('%',#{searchValue},'%')
							<if test="groupNo>0">
								 OR group_no = #{tagGroupNo} 
							</if>
						</if>
						)
							tags
						INNER JOIN
							booktag
						ON booktag.tag_no = tags.tag_no
						group by book_no
					)
				UNION
					(
					select book_no
					from tmptag
					where
					1=1
					<if test="searchValue != null and searchValue != ''">
						and tmptag_name LIKE CONCAT('%',#{searchValue},'%')
					</if>
					)
				) bookno NATURAL JOIN book
			) res left outer join category 
			on res.category_no = category.category_no
		where 1=1
			<if test="writer>0">
				and writer = #{writer}
			</if>
			<choose>
				<when test="openScope != null and openScope != ''">
					<choose>
						<when test="openScope == 'block'">
							and open_scope = "block"
						</when>
						<when test="openScope == 'public'">
							and open_scope = "public"
						</when>
						<when test="openScope == 'protected'">
							and (open_scope = "public" or open_scope = "protected")
						</when>
						<when test="openScope == 'private'">
							and (open_scope = "public" or open_scope = "protected" or open_scope = "private")
						</when>
						<otherwise>
							and open_scope = "public"
						</otherwise>
					</choose>
				</when>
				<otherwise>
					and open_scope = "public"
				</otherwise>									
			</choose>		
	 	<!-- 
	 	select
	 		count(book_no)
	 	from
	 		book
	 	where
	 		1=1
	 	-->
	 	<!-- 검색조건 -->
	 	<!-- 
	 	<if test="openScope != null and openScope != ''">
 			<if test="openScope == 'block'">
 				and open_scope = "block"
 			</if>
 			<if test="openScope == 'public'">
 				and open_scope = "public"
 			</if>
 			<if test="openScope == 'protected'">
 				and open_scope = "public" or open_scope = "protected"
 			</if>
 			<if test="openScope == 'private'">
 				and open_scope = "public" or open_scope = "protected" or open_scope = "private"
 			</if>
 		</if>	
	 	<if test="bookNo > 0">
	 		and book_no = #{bookNo}
	 	</if>
	 	<if test="writer > 0">
	 		and writer = #{writer}
	 	</if>
	 	<if test="bookTitle != null and bookTitle != ''">
	 		and book_title like CONCAT('%',#{bookTitle},'%')
	 	</if>
	 	<if test="version > 0">
	 		and version = #{version}
	 	</if>
	 	<if test="writeDate != null and writeDate != ''">
	 		and write_date like CONCAT('%',#{writeDate},'%')
	 	</if>
	 	<if test="updateDate != null and updateDate != ''">
	 		and update_date like CONCAT('%',#{updateDate},'%')
	 	</if>
	 	<if test="coverFront != null and coverFront != ''">
	 		and cover_front like CONCAT('%',#{coverFront},'%')
	 	</if>
	 	<if test="coverMiddle != null and coverMiddle != ''">
	 		and cover_middle like CONCAT('%',#{coverMiddle},'%')
	 	</if>
	 	<if test="coverBack != null and coverBack != ''">
	 		and cover_back like CONCAT('%',#{coverBack},'%')
	 	</if>
	 	<if test="categoryNo > 0">
	 		and category_no = #{categoryNo}
	 	</if>
	 	<if test="likeCount > 0">
	 		and like_count = #{likeCount}
	 	</if>
	 	-->
	 	
	 </select>
	<select id="validateBook" resultType="Book">
	 	select book_no bookNo
	 	from book
	 	where writer = #{writer} AND book_no = #{bookNo}
	 </select>
</mapper>
