<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
	<mapper namespace="com.ssazit.dao.CommentDAO">

	<!-- 
			private int 	commentNo;		/*PK AI 댓글번호*/
			private int 	articleNo;			/*FK 게시글 번호*/
			private int 	bookNo;				/*FK 책 번호*/
			private int 	userNo;				/*FK NN 작성자*/
			private String 	content;			/*NN 내용*/
			private String 	writeDate;			/*NN default now() 작성일자*/
			private boolean isPick;				/*NN default false 채택여부(true|false)*/
			private int 	likeCount;			/*NN default 0 추천수(트리거 참조칼럼)*/
			
			private String 	searchKey;			/*검색 키*/
			private String 	searchValue;		/*검색 값*/
			private String 	orderKey;			/*정렬 키*/
			private String 	orderValue;			/*정렬 값*/
			private int 	limitStart;			/*페이징 시작*/
			private int 	limitEnd;			/*페이징 끝*/
	 -->
	 
	 <!-- 입력 -->
	 <insert id="insertComment" parameterType="Comment">
	 	insert into comment(
	 		<if test="articleNo != 0">
	 		article_no,
	 		</if>
	 		<if test="bookNo != 0">
	 		book_no,
	 		</if>
	 		user_no,
	 		content,
	 		write_date
	 		)
	 	values (
	 		<if test="articleNo != 0">
	 		#{articleNo},
	 		</if>
	 		<if test="bookNo != 0">	 		
	 		#{bookNo},
	 		</if>
	 		#{userNo},
	 		#{content},
	 		now()
	 		)
	 </insert>
	 
	 <!-- 수정 -->
	 <update id="updateComment" parameterType="Comment">
	 	update
	 		comment
	 	set
	 		<if test="articleNo != 0">
	 		article_no = #{articleNo},
	 		</if>
	 		<if test="bookNo != 0">
	 		book_no = #{bookNo},
	 		</if>
	 		content = #{content},
	 		write_date = now()
	 	where
	 		1=1
	 	and
	 		comment_no = #{commentNo} and user_no = #{userNo}
	 </update>
	 
	 <!-- 삭제 -->
	 <delete id="deleteComment" parameterType="Comment">
	 	delete from
	 		comment
	 	where
	 		1=1
	 	and
	 		comment_no = #{commentNo}
	 </delete>
	 
	 <!-- 상세보기 -->
	 <select id="selectCommentOne" parameterType="Comment" resultType="Comment">
	 	select
	 		comment_no as commentNo,
	 		article_no as articleNo,
	 		book_no as bookNo,
	 		user_no as userNo,
	 		content as content,
	 		write_date as writeDate,
	 		is_pick as isPick,
	 		like_count as likeCount
	 	from
	 		comment
	 	where
	 		1=1
	 	and
	 		comment_no = #{commentNo}
	 </select>
	 
	 <!-- 검색(List) -->
	 <select id="selectCommentList" parameterType="Comment" resultType="Comment">
	 		select
				cmt.comment_no as commentNo,
				article_no as articleNo,
				book_no as bookNo,
				cmt.user_no as userNo,
				content as content,
				write_date as writeDate,
				is_pick as isPick,
				like_count as likeCount,
				user_id	as userId,
				nick_name as nickName,
				user_level as userLevel,
				profile_img as profileImg,
                like_date as likeDate
            from
			(select
				*
			from
				comment natural join user
            where 1=1
		 	<if test="articleNo > 0">
		 		and article_no = #{articleNo}
		 	</if>
		 	<if test="bookNo > 0">
		 		and book_no = #{bookNo}
		 	</if>
		 	<if test="userNo > 0">
		 		and user_no = #{userNo}
		 	</if>
		 	<if test="content != null and content != ''">
		 		and content like CONCAT('%',#{content},'%')
		 	</if>
		 	<if test="isPick > -1">
		 		and is_pick = #{isPick}	
		 	</if>
		 	order by is_pick DESC , like_count DESC , write_date DESC
		 	) cmt
            left outer join commentlike
            on cmt.comment_no = commentlike.comment_no and commentlike.user_no = #{loginUserNo}
	 	<!-- 검색조건 -->
	 	<!-- 정렬조건 -->
	 	 
	 	<choose>
	 		<when test="orderValue == 'DESC'">
	 			<choose>
	 				<when test="orderKey == 'commentNo'">
	 					order by comment_no DESC
	 				</when>
	 				<when test="orderKey == 'articleNo'">
	 					order by article_no DESC
	 				</when>
	 				<when test="orderKey == 'bookNo'">
	 					order by book_no DESC
	 				</when>
	 				<when test="orderKey == 'userNo'">
	 					order by user_no DESC
	 				</when>
	 				<when test="orderKey == 'content'">
	 					order by content DESC
	 				</when>
	 				<when test="orderKey == 'isPick'">
	 					order by is_pick DESC
	 				</when>
	 				<when test="orderKey == 'likeCount'">
	 					order by like_count DESC
	 				</when>
	 				<otherwise>
	 					order by write_date DESC
	 				</otherwise>
	 			</choose>
	 		</when>
	 		<otherwise>
	 			<choose>
	 				<when test="orderKey == 'commentNo'">
	 					order by comment_no ASC
	 				</when>
	 				<when test="orderKey == 'articleNo'">
	 					order by article_no ASC
	 				</when>
	 				<when test="orderKey == 'bookNo'">
	 					order by book_no ASC
	 				</when>
	 				<when test="orderKey == 'userNo'">
	 					order by user_no ASC
	 				</when>
	 				<when test="orderKey == 'content'">
	 					order by content ASC
	 				</when>
	 				<when test="orderKey == 'isPick'">
	 					order by is_pick ASC
	 				</when>
	 				<when test="orderKey == 'likeCount'">
	 					order by like_count ASC
	 				</when>
	 				<otherwise>
	 					order by is_pick DESC, like_count DESC, write_date DESC
	 				</otherwise>
	 			</choose>
	 		</otherwise>
	 	</choose>
	 	<!-- page 처리 -->
	 	<if test="limitEnd > 0 and limitStart >= 0">
			limit #{limitStart}, #{limitEnd}
		</if>
	 </select>
	 
	 <!-- 검색(갯수) -->
	 <select id="selectCommentCount" parameterType="Comment" resultType="Integer">
	 		select
				count(*)
            from
			(select
				*
			from
				comment natural join user
            where 1=1
		 	<if test="articleNo > 0">
		 		and article_no = #{articleNo}
		 	</if>
		 	<if test="bookNo > 0">
		 		and book_no = #{bookNo}
		 	</if>
		 	<if test="userNo > 0">
		 		and user_no = #{userNo}
		 	</if>
		 	<if test="content != null and content != ''">
		 		and content like CONCAT('%',#{content},'%')
		 	</if>
		 	<if test="isPick > -1">
		 		and is_pick = #{isPick}	
		 	</if>
		 	order by is_pick DESC , like_count DESC , write_date DESC
		 	) cmt
            left outer join commentlike
            on cmt.comment_no = commentlike.comment_no and commentlike.user_no = #{loginUserNo}
	 </select>
	<!-- 댓글 채택 -->
	<update id="pickComment">
		update comment
		set is_pick = #{isPick}
		where comment_no = #{commentNo}
	</update>
	<!-- mycomment -->
	<select id="selectMyComment" resultType="Comment">
		select
			comment_no as commentNo,
            comment.article_no as articleNo,
            comment.content as content,
            comment.write_date as writeDate,
            is_pick as isPick,
            article.title as articleTitle,
            blog.blog_name as blogName,
            user_id as userId
		from
			comment inner join article
				on comment.article_no = article.article_no
           	inner join myboard
				on article.board_no = myboard.board_no
			inner join user
				on article.user_no = user.user_no 
			inner join blog
				on myboard.blog_no = blog.blog_no
         	where 1=1
				and comment.user_no = #{userNo}
			order by comment.write_date desc
			<if test="limitStart >= 0">
				limit #{limitStart}, 10
			</if>
	</select>
	
	<select id="selectMyBookComment" resultType="Comment" parameterType="Comment">
		select
			comment_no as commentNo,
            comment.book_no as bookNo,
			comment.content as content,
			comment.write_date as writeDate,
			comment.is_pick as isPick,
			book.book_title as bookTitle,
            blog.blog_name as blogName,
            user_id as userId
		from
			comment inner join book
				on comment.book_no = book.book_no
           	inner join blog
				on book.writer = blog.user_no
			inner join user
				on book.writer = user.user_no  
		where 1=1
			and comment.user_no = #{userNo}
			order by comment.write_date desc
		<if test="limitEnd > 0 and limitStart >= 0">
			limit #{limitStart}, #{limitEnd}
		</if>
	</select>
	
	<select id="selectMyCommentCount" resultType="Integer">
		select
			count(*)
		from
			comment inner join article
				on comment.article_no = article.article_no
           	inner join blog
				on article.user_no = blog.user_no
			inner join user
				on article.user_no = user.user_no  
		where 1=1
			and comment.user_no = #{userNo}
			order by comment.write_date desc
	</select>
	<select id="selectMyBookCommentCount" parameterType="Comment" resultType="Integer">	
		select
			count(comment_no)
		from
			comment inner join book
				on comment.book_no = book.book_no
           	inner join blog
				on book.writer = blog.user_no 
		where 1=1
			and comment.user_no = #{userNo}
			order by comment.write_date desc
	</select>
	
	
</mapper>
